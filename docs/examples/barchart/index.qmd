---
title: "Examples: basic barchart"
author: James Goldie
date: last-modified
filters:
  - sverto
sverto:
  use:
    - BarChart.svelte
---

Let's start with a simple barchart.

This isn't going to be one of those barcharts you've seen on TV, what with tick marks and hover effects and such. This one's just some bars, some labels and a baseline. It will, however, come with some useful features to help us reuse it.

If you'd like to see how the bar chart works internally, the code for it is shown at the bottom of this page.

But for the purposes of this example, all you need to know about is the chart's _props_: updateable options to customise the chart. We'll cover those in step 3.

# Step 1: import

First, we need to add Sverto and the bar chart's `.svelte` file to our document frontmatter:

```yaml
---
filters:
  - sverto
sverto:
  use:
    - BarChart.svelte
---
```

# Step 2: place

To place the component on the page, we use its [custom element name](https://svelte.dev/docs/svelte/custom-elements) (found at the top of the Svelte file) and create it like an HTML tag.

:::::{.column-margin style="height: 1500px"}
::::{.barchart-wrapper}

```{ojs}
//| echo: fenced
myBarChart =
  html`
    <bar-chart>
    </bar-chart>`
```

[We made this barchart with Svelte!]{style="color: #999999; font-size: smaller; text-transform: uppercase;"}

```{=html}
<style>
  @media (min-width: 768px) {
    .barchart-wrapper {
      position: sticky;
      top: 150px;
    }
  }
</style>
```
::::
:::::

If you're reading this on a desktop, I've placed the barchart in the page margin so we can keep an eye on it as it changes!

We've also assigned the barchart to a variable in OJS, `myBarChart`. You don't have to this—unless you want to change your chart over time!

# Step 3: react

The real power of Sverto is that we can customise aspects of our charts and have them update in response to other things.

In Svelte, these customisable options are called [props](https://svelte.dev/tutorial/svelte/declaring-props).

This Svelte component accepts a few props:

* `data`: a simple array of (up to) 5 numbers
* `height`: the height of the chart in pixels
* `width`: the width of the chart in pixels
* `barWidth`: the width of each bar
* `barColor`: the colour of the bars and labels (note the US spelling here) in res

We can update any of those props in OJS code using `myBarChart.propName`. We can make them values that are fixed and unchanging:

```{ojs}
//| echo: fenced
myBarChart.width = 200
```

But we can also tie them to things that change, like our data!

:::{}

:::{.panel-input}

**Let's make some controls so that users can animate the chart's data and colour themselves:**

```{ojs}
//| echo: fenced
//| code-fold: true

viewof userData = Inputs.form(
  [
    Inputs.number({ value: 25, width: 20}),
    Inputs.number({ value: 35, width: 20}),
    Inputs.number({ value: 65, width: 20}),
    Inputs.number({ value: 5, width: 20}),
    Inputs.number({ value: 50, width: 20})
  ]);

viewof userColor = Inputs.color({ value: "#36a7e9" });
```

:::

Now, we update the props to the value of these controls:

```{ojs}
//| echo: fenced
//| 
myBarChart.data = [...userData];
myBarChart.barColor =  userColor;
```

And we're done!

:::{.callout-note appearance="simple" collapse="true"}
## Weren't there other props, like `height` and `barWidth`?

Yup! The props in this Svelte component (and many that you'll use) have default values that are used if you don't provide one. Keep in mind that your Svelte component will start with those defaults on page load and _then_ switch to the values you provide in OJS.

You can also include default props when you place the component — for example, `<bar-chart barColour="pink"></bar-chart>`.

By default, default prop values are interpreted as strings. If you want to pass other types of data as default props, you'll need to [specify that](https://svelte.dev/docs/svelte/custom-elements#Component-options) at the top of your Svelte file.
:::

# Summary

How did we get this chart going again?

1. Add `filters: ["sverto"]` to our frontmatter, plus the name of our Svelte file to `sverto.use`
2. Created the chart with ``myBarChart = html`<bar-chart></bar-chart>` ``
4. We updated the bar chart by assigning to `myBarChart.propName`

# Challenges

Here's the code in the Svelte file:

:::{.callout-note appearance="simple" collapse="true" title="BarChart.svelte"}
```{.html}
{{< include BarChart.svelte >}}
```
:::

If you'd like to start practising your Svelte, start with [the official tutorial](https://learn.svelte.dev/tutorial/welcome-to-svelte). Sverto is designed to make using Svelte components in Quarto as easy as working in the tutorial.

This Svelte component's pretty basic, though. What else is it missing?

#### Resizing

The `height` and the `width` of the chart are configurable using props, and the bars resize in response to them, but the CSS transitions that grow and shrink them are slow to catch up.

Ideally we'd turn those transitions off when the chart as a whole is resizing!

#### Other barchart elements

We have no axes other than the baseline. That's fine for a lot of uses, but we might want to add those elements for other uses.

We could add those elements manually, but the [`d3-axis`](https://github.com/d3/d3-axis) package has some helpers for creating axes quickly!

#### Colour scales

The bars are all the same colour. We could write a function that converts each bar's data value to a colour, and use it for the `fill` attribute of the `<rect>`, but the [`d3-scale-chromatic`](https://github.com/d3/d3-scale-chromatic) also has some helpers to do this quickly!

`d3` is included with OJS, but if you want to use `d3-scale-chromatic` (or any other part of d3) in your Svelte components, you'll have to add it yourself by:

- running `npm install d3-scale-chromatic` in the terminal, then
- adding `import XXXX from "d3-scale-chromatic"`, where `XXXX` is the name of the thing you want to import (or `*`).

### A more complex example

If you'd like to see an example that addresses some of these shortcomings, check out the [time series chart example](../time-series), which automatically resizes and adds axes that transition!

[See the time series chart →]((../time-series)){.btn .btn-success}